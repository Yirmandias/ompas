syntax = "proto3";

message StateVariable {
  StateVariableType type = 1;
  string state_function = 2;
  repeated Atom parameters = 3;
  Expression value = 4;
}

message StateUpdate {
  repeated StateVariable state_variables = 1;
}

enum StateVariableType {
  STATIC = 0;
  DYNAMIC = 1;
}
message Atom {
  oneof kind {
    string symbol = 1;
    int64  int = 2;
    double float = 3;
    bool boolean = 4;
  }
}

message Expression {
  // For instance `3`, `+`, `kitchen`, `at-robot`, ...
  Atom atom = 1;
  // If the `atom` field is empty, then the expression is a list of sub-expressions,
  // typically representing the application of some arguments to a function or fluent.
  // For instance `(+ 1 3)`, (at-robot l1)`, `(>= (battery_level) 20)`
  repeated Expression list = 2;
}

message CommandRequest {
  oneof request {
    CommandExecutionRequest execution = 1;
    CommandCancelRequest cancel = 2;
  }
}

message CommandExecutionRequest {
  repeated Expression arguments = 1;
  uint64 command_id = 2;
}

message CommandCancelRequest {
  uint64 command_id = 1;
}

message CommandResponse {
  oneof response {
    CommandAccepted accepted = 1;
    CommandRejected rejected = 2;
    CommandProgress progress = 3;
    CommandResult result = 4;
    CommandCancelled cancelled = 5;
  }
}

message CommandRejected {
  uint64 command_id = 1;
}

message CommandAccepted {
  uint64 command_id = 1;
}

message CommandProgress {
  uint64 command_id = 1;
  double progress = 2;
}

message CommandResult {
  uint64 command_id = 1;
  bool result = 2;
}

message CommandCancelled {
  uint64 command_id = 1;
  bool result = 2;
}

message InitGetUpdate {}

message Event {
  oneof event {
    Instance instance = 1;
  }
}

message Instance {
  string type = 1;
  string object = 2;
}

message PlatformUpdate {
  oneof update {
    StateUpdate state = 1;
    Event event = 2;
  }
}

service platform_interface {
  rpc GetUpdates(InitGetUpdate) returns(stream PlatformUpdate);
  rpc SendCommands(stream CommandRequest) returns (stream CommandResponse);
}
