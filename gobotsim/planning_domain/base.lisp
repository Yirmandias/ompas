(begin
    ;types declaration
    (def-types machine robot package belt parking_area interact_area)

    ;state function declaration
    (def-state-function robot.coordinates (:params (?r robot)) (:result (tuple int int)))
    (def-state-function robot.instance (:params (?r robot)) (:result symbol))
    (def-state-function robot.coordinates_tile (:params (?r robot)) (:result (tuple int int)))
    (def-state-function robot.battery (:params (?r robot)) (:result float))
    (def-state-function robot.velocity (:params (?r robot)) (:result (tuple float float)))
    (def-state-function robot.rotation_speed (:params (?r robot)) (:result float))
    (def-state-function robot.in_station (:params (?r robot)) (:result bool))
    (def-state-function robot.in_interact_areas (:params (?r robot)) (:result (list interact_area)))
    (def-state-function machine.instance (:params (?m machine)) (:result  symbol))
    (def-state-function machine.coordinates (:params (?m machine)) (:result (tuple int int)))
    (def-state-function machine.coordinates_tile (:params (?m machine)) (:result (tuple int int)))
    (def-state-function machine.input_belt (:params (?m machine)) (:result belt))
    (def-state-function machine.output_belt (:params (?m machine)) (:result belt))
    (def-state-function machine.processes_list (:params (?m machine)) (:result (list int)))
    (def-state-function machine.type (:params (?m machine)) (:result symbol))
    (def-state-function machine.progress_rate (:params (?m machine)) (:result float))
    (def-state-function machine.package_processed (:params (?m machine)) (:result package))
    (def-state-function package.instance (:params (?p package)) (:result symbol))
    (def-state-function package.location (:params (?p package)) (:result symbol))
    (def-state-function package.processes_list (:params (?p package)) (:result (list (tuple int float))))
    (def-state-function belt.instance (:params (?b belt)) (:result symbol))
    (def-state-function belt.belt_type (:params (?b belt)) (:result symbol))
    (def-state-function belt.polygons (:params (?b belt)) (:result (list (tuple int int))))
    (def-state-function belt.cells (:params (?b belt)) (:result (list (tuple int int))))
    (def-state-function belt.interact_areas (:params (?b belt)) (:result (list interact_area)))
    (def-state-function belt.packages_list (:params (?b belt)) (:result (list package)))
    (def-state-function parking_area.instance (:params (?pa parking_area)) (:result symbol))
    (def-state-function parking_area.polygons (:params (?pa parking_area)) (:result (list (tuple int int))))
    (def-state-function parking_area.cells (:params (?pa parking_area)) (:result (list (tuple int int))))
    (def-state-function interact_area.instance (:params (?pa parking_area)) (:result symbol))
    (def-state-function interact_area.polygons (:params (?pa parking_area)) (:result (list (tuple int int))))
    (def-state-function interact_area.cells (:params (?pa parking_area)) (:result (list (tuple int int))))
    (def-state-function interact_area.belt (:params (?pa parking_area)) (:result belt))

    ;command definition
    (def-command process (:params (?m machine) (?p package)))
    (def-command pick (:params (?r robot)))
    (def-command pick_package (:params (?r robot) (?p package)))
    (def-command place (:params (?r robot)))
    (def-command do_move (:params (?r robot) (?a float) (?s float) (?d float)))
    (def-command navigate_to (:params (?r robot) (?x float) (?y float)))
    (def-command navigate_to_cell (:params (?r robot) (?cx int) (?cy int)))
    (def-command navigate_to_area (:params (?r robot) (?area object)))
    (def-command go_charge (:params (?r robot)))
    (def-command do_rotation (:params (?r robot) (?a float) (?w float)))   
    (def-command face_belt (:params (?r robot) (?b belt) (?w float)))
    (def-command rotate_to (:params (?r robot) (?a float) (?w float)))
    
)